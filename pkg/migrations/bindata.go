// Package migrations Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// 1_initialize_shema.down.sql
// 1_initialize_shema.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initialize_shemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x2c\x2d\xca\x29\x4e\xb0\x06\x04\x00\x00\xff\xff\x29\x63\x85\x18\x1d\x00\x00\x00")

func _1_initialize_shemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initialize_shemaDownSql,
		"1_initialize_shema.down.sql",
	)
}

func _1_initialize_shemaDownSql() (*asset, error) {
	bytes, err := _1_initialize_shemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initialize_shema.down.sql", size: 29, mode: os.FileMode(420), modTime: time.Unix(1582509587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initialize_shemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xcb\x6e\xda\x40\x14\x06\xe0\xfd\x3c\xc5\xbf\x8b\x2d\x05\xc9\x90\x40\x88\x10\x8b\x01\x26\x64\x54\x33\x8e\xec\xa1\x2a\x2b\x63\xf0\x24\x58\x35\x26\x35\x76\xd5\x65\xd7\xdd\x55\x6a\x97\x5d\xf4\x05\xba\xae\x84\xaa\xbe\x4c\xa2\x2a\x6f\x51\xd9\xe6\x52\x1a\xd7\xf5\x82\xdb\xf9\xfe\xe3\x61\xe6\xb8\x56\x43\xad\xe2\x22\xb5\x1a\xa4\x37\x0b\x15\xd6\x49\x9c\xce\x93\x34\x56\xb8\x5d\xc5\x08\x83\xe8\xf5\x9a\xfc\x2f\x3c\xb0\xad\x1b\x48\xda\x33\x19\xf8\x15\xd8\x2b\xee\x48\x07\xd3\x37\x69\x1c\xae\xa7\x1d\xd2\x8f\x95\x97\xa8\x6d\x7d\xfb\x2b\xd1\x08\x00\x4c\x03\x7f\x8a\xdd\x35\x0b\xee\x82\x28\xd1\x1a\x86\x0e\x40\x58\x12\x62\x6c\x9a\xa0\x63\x69\xb9\x5c\xf4\x6d\x36\x62\x42\xa2\x6f\x8d\xf2\xf7\x93\x87\xcd\xe6\xf1\xc3\x57\x3e\xc0\xc3\xf7\xcd\xd3\xa7\x6f\x27\xa7\x45\xc3\x34\x0e\xf7\x1d\xdf\x7a\xf1\x7c\xe1\xc5\x5a\xa3\xd9\xd4\x0f\x0d\xf7\x1d\x9e\x3e\xff\xfc\xf5\xe3\xe3\xe3\x97\xf7\xbb\xec\xc2\x5b\x2f\x76\xe1\x3c\x58\x6f\xe9\xf9\x97\xe7\xd9\xa5\xdf\x44\xbd\x85\x2c\xb1\x4b\xcf\xf3\xbf\xe9\xbb\x5e\x32\x45\x12\x2c\xd5\x3a\xf1\x96\xf7\x47\xe9\xec\x65\x8b\x7d\x15\xaa\xe7\x78\xc0\xae\xe8\xd8\x94\x7f\xc0\x1b\x9b\x8f\xa8\x3d\xc1\x0b\x36\x81\x96\xed\x96\x8e\xb1\xc3\xc5\x10\x3d\x69\x33\x56\x98\xac\x96\xef\xaa\x9b\x2d\xc7\x0d\x22\x5f\xbd\x83\x96\x7d\x3e\xc2\x44\x07\x13\x43\x2e\x18\xba\xe0\x51\xb4\x1a\xf4\x08\xf6\x77\xec\x5f\x53\xdb\x61\x12\x5d\xa4\xc9\x6d\x7b\x39\x3b\x27\xf8\x7b\xe7\xbb\xa8\x1b\x86\x61\x10\xa0\x6f\x99\x26\x95\xec\x80\xdd\x3b\x15\xa9\xd8\x0b\xdd\x79\x50\xac\x9a\xda\x92\x4b\x6e\x09\xf4\x26\xb0\xa9\x18\x32\x68\x81\xaf\xa3\x38\xf4\x63\x71\x6f\xe0\x25\x35\xc7\xcc\x81\xc9\x1c\x07\xf2\x9a\x0a\x68\xf9\x9d\x0c\xfd\xb4\xcc\xd7\x4b\x7c\xa3\xc2\x37\x4a\xfc\x59\x85\x3f\x2b\xf1\xe7\x15\xfe\xbc\xc4\x37\x2b\x7c\xb3\xc4\xb7\x2a\x7c\xab\xc4\x5f\x54\xf8\x8b\x12\xdf\xae\xf0\xed\x12\x7f\x59\xe1\x2f\xff\x79\x5e\x86\xbe\xf7\x7a\x87\x14\xcf\x03\x8a\x71\x2c\xe6\xf3\x30\xf5\xc5\x94\xe6\x7c\x15\x15\x55\x68\x87\xb2\xde\x21\xbf\x03\x00\x00\xff\xff\x2a\x26\xac\x56\xb1\x04\x00\x00")

func _1_initialize_shemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initialize_shemaUpSql,
		"1_initialize_shema.up.sql",
	)
}

func _1_initialize_shemaUpSql() (*asset, error) {
	bytes, err := _1_initialize_shemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initialize_shema.up.sql", size: 1201, mode: os.FileMode(420), modTime: time.Unix(1582508560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_initialize_shema.down.sql": _1_initialize_shemaDownSql,
	"1_initialize_shema.up.sql":   _1_initialize_shemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_initialize_shema.down.sql": &bintree{_1_initialize_shemaDownSql, map[string]*bintree{}},
	"1_initialize_shema.up.sql":   &bintree{_1_initialize_shemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
